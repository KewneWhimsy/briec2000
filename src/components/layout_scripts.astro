---
// src/components/layout_scripts.astro
// Composant pour regrouper les scripts du layout
---

<script is:inline>
  // Fonction pour détecter les WebViews Instagram
  function isInstagramWebView() {
    const userAgent = navigator.userAgent || "";
    return userAgent.indexOf("Instagram") > -1;
  }

  // Fonction pour appliquer les ajustements spécifiques à Instagram
  function applyInstagramFixes() {
    // 1. Ajuster le viewport
    const viewportMeta = document.querySelector('meta[name="viewport"]');
    if (viewportMeta) {
      viewportMeta.setAttribute(
        "content",
        "width=device-width, initial-scale=0.75, maximum-scale=2.0, user-scalable=1"
      );
    }

    // 2. Marquer le HTML avec une classe spéciale
    document.documentElement.classList.add("instagram-webview");
  }

  // Vérifier si nous sommes dans Instagram WebView
  const isInsta = isInstagramWebView();

  // Appliquer les fixes immédiatement
  if (isInsta) {
    applyInstagramFixes();

    // Stocker l'info dans sessionStorage pour la persistance entre pages
    sessionStorage.setItem("is-instagram", "true");
  }

  // Réappliquer après chaque chargement de page
  document.addEventListener("DOMContentLoaded", function () {
    if (isInsta || sessionStorage.getItem("is-instagram") === "true") {
      applyInstagramFixes();
    }
  });

  // Pour Astro : réappliquer après chaque transition de page
  document.addEventListener("astro:page-load", function () {
    if (isInsta || sessionStorage.getItem("is-instagram") === "true") {
      applyInstagramFixes();
    }
  });

  // Empêcher les transitions sur Instagram pour éviter les problèmes de viewport
  if (isInsta || sessionStorage.getItem("is-instagram") === "true") {
    window.addEventListener("astro:before-preparation", (event) => {
      // Forcer la navigation standard au lieu des transitions Astro
      if (event.navigationType === "traverse") {
        event.preventDefault();
        window.location.href = event.to.href;
      }
    });
  }
</script>

<!-- Script pour éviter le flash de couleur -->
<script is:inline>
  (function () {
    // Récupérer le thème sauvegardé
    var savedTheme = localStorage.getItem("selected-theme");

    // Si pas de thème sauvegardé, utiliser la préférence système
    if (!savedTheme) {
      var prefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches;
      savedTheme = prefersDark ? "ocean-profond" : "lavande";
    }

    // Appliquer le thème immédiatement
    document.documentElement.setAttribute("data-theme", savedTheme);
  })();
</script>

<!-- Script pour gérer les interactions utilisateur -->
<script>
  /**
   * Gère à la fois le prevent default pour les emails et la copie du menu
   */
  function initCopyFunctions() {
    // Créer une notification générique pour toute fonctionnalité de copie
    function createNotificationIfNeeded() {
      if (!document.getElementById("copy-notification")) {
        const notification = document.createElement("div");
        notification.id = "copy-notification";
        notification.style.cssText = `
          position: fixed;
          top: 10px;
          right: 10px;
          background-color: var(--color-secondary);
          color: white;
          padding: 8px 16px;
          border-radius: 4px;
          font-size: 0.9rem;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
          opacity: 0;
          transform: translateX(100px);
          transition: transform 0.3s ease, opacity 0.3s ease;
          z-index: 1000;
          display: flex;
          align-items: center;
          gap: 8px;
        `;

        notification.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" 
               stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="20 6 9 17 4 12"></polyline>
          </svg>
          <span>Menu copié !</span>
        `;
        document.body.appendChild(notification);
      }
    }

    // Fonction simplifiée pour afficher la notification
    function showNotification() {
      const notification = document.getElementById("copy-notification");
      if (notification) {
        notification.style.transform = "translateX(0)";
        notification.style.opacity = "1";

        setTimeout(() => {
          notification.style.transform = "translateX(100px)";
          notification.style.opacity = "0";
        }, 2000);
      }
    }

    // 1. Empêcher le comportement par défaut des liens d'e-mail
    document.querySelectorAll(".email-copy").forEach((link) => {
      // Éviter les doubles listeners
      if (link.getAttribute("data-initialized") === "true") return;

      link.addEventListener("click", (e) => {
        e.preventDefault();
      });

      link.setAttribute("data-initialized", "true");
    });

    // 2. Gérer la copie du menu
    document.querySelectorAll(".copy-menu-btn").forEach((button) => {
      // Éviter les doubles listeners
      if (button.getAttribute("data-initialized") === "true") return;

      button.addEventListener("click", async () => {
        try {
          // S'assurer que la notification existe
          createNotificationIfNeeded();

          // Copier le menu formaté
          await navigator.clipboard.writeText(formatMenuForCopy());

          // Retour visuel sur le bouton
          button.classList.add("copied");
          const originalIcon = button.innerHTML;
          button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" 
                 stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="20 6 9 17 4 12"></polyline>
            </svg>
          `;

          // Retour à l'état initial après 2 secondes
          setTimeout(() => {
            button.innerHTML = originalIcon;
            button.classList.remove("copied");
          }, 2000);

          // Afficher la notification
          showNotification();
        } catch (err) {
          console.error("Erreur de copie:", err);
        }
      });

      button.setAttribute("data-initialized", "true");
    });
  }

  // Fonction simplifiée pour formatter le menu
  function formatMenuForCopy() {
    // Extraire les informations essentielles du menu
    const title =
      document.querySelector(".menu-title h3")?.textContent?.trim() ||
      "La Cantine Mensuelle";
    const subtitle =
      document.querySelector(".menu-subtitle")?.textContent?.trim() || "";

    // Récupérer les plats
    const entree =
      document
        .querySelector(".course-title:nth-of-type(1) + .dish .dish-name")
        ?.textContent?.trim() || "";
    const platPrincipal =
      document
        .querySelector(".course-title:nth-of-type(2) + .dish .dish-name")
        ?.textContent?.trim() || "";
    const platDescription =
      document.querySelector(".dish-description")?.textContent?.trim() ||
      "";

    // Options
    const optionVeg =
      document
        .querySelector(".option:nth-of-type(1)")
        ?.textContent?.trim() || "";
    const optionCarne =
      document
        .querySelector(".option:nth-of-type(2)")
        ?.textContent?.trim() || "";

    // Dessert
    const dessert =
      document
        .querySelector(".course-title:nth-of-type(3) + .dish .dish-name")
        ?.textContent?.trim() || "";
    const dessertDesc =
      document
        .querySelectorAll(".dish-description")[1]
        ?.textContent?.trim() || "";

    // Note
    const note =
      document.querySelector(".menu-note")?.textContent?.trim() || "";

    // Formater le texte
    return (
      `${title} - ${subtitle}\n\n` +
      `--- ENTRÉE ---\n${entree}\n\n` +
      `--- PLAT PRINCIPAL ---\n${platPrincipal}\n${platDescription}\n\n` +
      `${optionVeg}\n${optionCarne}\n\n` +
      `--- DESSERT ---\n${dessert}\n${dessertDesc}\n\n` +
      `Note: ${note}\n\n` +
      `Réservation par mail à briec2000@emailasso.net`
    );
  }

  // Gestion des liens actifs du menu mobile (fonction réduite à l'essentiel)
  function updateMobileLinks() {
    document.querySelectorAll(".nav-link").forEach((link) => {
      const href = link.getAttribute("href");
      if (!href) return;

      // Vérifier si le lien correspond au chemin actuel
      const isActive =
        href === "/"
          ? window.location.pathname === "/"
          : window.location.pathname.endsWith(href);

      // Mettre à jour la classe active
      link.classList.toggle("active", isActive);
    });
  }

  // Initialiser les fonctionnalités lors du chargement et des transitions
  document.addEventListener("DOMContentLoaded", () => {
    initCopyFunctions();
    updateMobileLinks();
  });

  document.addEventListener("astro:page-load", () => {
    initCopyFunctions();
    updateMobileLinks();
  });

  // Activer les fonctionnalités immédiatement
  initCopyFunctions();
  updateMobileLinks();
</script>