---
// src/components/optimize_image.astro
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

// Importer les images individuellement
import repasImage from '../assets/events/repas.png';
import carnabalImage from '../assets/events/carnabal.jpg';
// Importer les nouvelles silhouettes
import silhouette1Image from '../assets/silhouettes/silhouette1.png';
import silhouette2Image from '../assets/silhouettes/silhouette2.png';
import silhouette3Image from '../assets/silhouettes/silhouette3.png';
// Ajoutez d'autres imports selon vos besoins

// Définir le type pour l'objet imageMap avec index signature
interface ImageMap {
  [key: string]: ImageMetadata;
}

// Créer un map des chemins aux images importées
const imageMap: ImageMap = {
  '/src/assets/events/repas.png': repasImage,
  '/src/assets/events/carnabal.jpg': carnabalImage,
  // Ajouter les silhouettes au mapping
  '/src/assets/silhouettes/silhouette1.png': silhouette1Image,
  '/src/assets/silhouettes/silhouette2.png': silhouette2Image,
  '/src/assets/silhouettes/silhouette3.png': silhouette3Image,
  // Ajoutez d'autres mappings selon vos besoins
};

// Props du composant
export interface Props {
  src: string;
  alt: string;
  widths?: number[];
  sizes?: string;
  class?: string;
  loading?: "eager" | "lazy";
  [key: string]: any;
}

// Récupération des props avec des valeurs par défaut
const { 
  src, 
  alt, 
  widths = [400, 800, 1200],
  sizes = "(max-width: 767px) 100vw, 800px",
  class: className = "w-full h-auto rounded-lg",
  loading = "lazy",
  ...props 
} = Astro.props;

// Obtenir la source de l'image correcte
const imageSrc = imageMap[src] || src;

// Vérifier si c'est l'image repas.png pour appliquer un arrière-plan automatiquement
// Ou si c'est une silhouette dans la classe silhouette-mobile (spécifique à la galerie mobile)
const isRepasImage = src.includes('repas.png');
const isSilhouetteWithClass = src.includes('silhouette') && className.includes('silhouette-mobile');
const isSpecialImage = isRepasImage || isSilhouetteWithClass;

// Si c'est un cas spécial, on ajoute une classe personnalisée
const finalClassName = isSpecialImage 
  ? `${className} special-image-with-bg` 
  : className;
---

{typeof imageSrc === 'object' ? (
  <Picture 
    src={imageSrc} 
    alt={alt} 
    widths={widths}
    sizes={sizes}
    formats={['avif', 'webp', 'png']} 
    class={finalClassName}
    loading={loading}
    {...props}
  />
) : (
  <img 
    src={imageSrc} 
    alt={alt} 
    class={finalClassName}
    loading={loading}
    {...props}
  />
)}

<style>
  /* Style pour appliquer l'arrière-plan directement aux images spéciales */
  html[data-theme*="lavande-sombre"] .special-image-with-bg,
  html[data-theme="amethyste-or"] .special-image-with-bg,
  html[data-theme="bleu-jaune"] .special-image-with-bg,
  html[data-theme="gris-ambre"] .special-image-with-bg,
  html[data-theme="ardoise-peche"] .special-image-with-bg,
  html[data-theme="prune-menthe"] .special-image-with-bg,
  html[data-theme="aubergine-citron"] .special-image-with-bg,
  html[data-theme="gris-citron"] .special-image-with-bg {
    background-color: var(--color-primary); /* Pour les thèmes sombres, utilise color-primary */
  }
  html[data-theme*="ocean-profond"] .special-image-with-bg{
    background-color: var(--color-secondary); /* Exception pour le thème ocean-profond */
  }
</style>