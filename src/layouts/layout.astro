---
// src/layouts/layout.astro
import Footer from "./footer.astro";
import SidebarMenu from "../components/sidebar_menu.astro";
import ThemeSwitcher from "../components/theme_switcher.astro";
import { Font } from "astro:assets";
import { ClientRouter } from "astro:transitions";
import "../styles/global.css";

// Définissez les props que vous souhaitez passer à votre layout
interface Props {
  title: string;
  description?: string;
  image?: string;
}

// Récupérez les props avec des valeurs par défaut
const {
  title,
  description = "Briec2000 - Site de l'Association",
  image = "/images/default-og.png",
} = Astro.props;

// Pour vérifier les liens actifs exacts et éviter les faux positifs
const currentPath = Astro.url.pathname;
---

<!doctype html>
<html lang="fr" transition:animate="none">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script is:inline>
      // Fonction pour détecter les WebViews Instagram
      function isInstagramWebView() {
        const userAgent = navigator.userAgent || "";
        return userAgent.indexOf("Instagram") > -1;
      }

      // Fonction pour appliquer les ajustements spécifiques à Instagram
      function applyInstagramFixes() {
        // 1. Ajuster le viewport
        const viewportMeta = document.querySelector('meta[name="viewport"]');
        if (viewportMeta) {
          viewportMeta.setAttribute(
            "content",
            "width=device-width, initial-scale=0.75, maximum-scale=2.0, user-scalable=1"
          );
        }

        // 2. Marquer le HTML avec une classe spéciale
        document.documentElement.classList.add("instagram-webview");
      }

      // Vérifier si nous sommes dans Instagram WebView
      const isInsta = isInstagramWebView();

      // Appliquer les fixes immédiatement
      if (isInsta) {
        applyInstagramFixes();

        // Stocker l'info dans sessionStorage pour la persistance entre pages
        sessionStorage.setItem("is-instagram", "true");
      }

      // Réappliquer après chaque chargement de page
      document.addEventListener("DOMContentLoaded", function () {
        if (isInsta || sessionStorage.getItem("is-instagram") === "true") {
          applyInstagramFixes();
        }
      });

      // Pour Astro : réappliquer après chaque transition de page
      document.addEventListener("astro:page-load", function () {
        if (isInsta || sessionStorage.getItem("is-instagram") === "true") {
          applyInstagramFixes();
        }
      });

      // Empêcher les transitions sur Instagram pour éviter les problèmes de viewport
      if (isInsta || sessionStorage.getItem("is-instagram") === "true") {
        window.addEventListener("astro:before-preparation", (event) => {
          // Forcer la navigation standard au lieu des transitions Astro
          if (event.navigationType === "traverse") {
            event.preventDefault();
            window.location.href = event.to.href;
          }
        });
      }
    </script>
    <meta name="description" content={description} />
    <meta property="og:image" content={image} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title transition:animate="fade">{title}</title>

    <!-- Activer les transitions de page avec le client router -->
    <ClientRouter fallback="animate" />

    <!-- Script pour éviter le flash de couleur -->
    <script is:inline>
      (function () {
        // Récupérer le thème sauvegardé
        var savedTheme = sessionStorage.getItem("selected-theme");

        // Si pas de thème sauvegardé, utiliser la préférence système
        if (!savedTheme) {
          var prefersDark = window.matchMedia(
            "(prefers-color-scheme: dark)"
          ).matches;
          savedTheme = prefersDark ? "ocean-profond" : "lavande";
        }

        // Appliquer le thème immédiatement
        document.documentElement.setAttribute("data-theme", savedTheme);
      })();
    </script>

    <Font name="Andika" cssVariable="--font-andika" preload />
    <Font name="Champ" cssVariable="--font-champ" preload />

    <style is:global>
      /* ============== SYSTÈME TYPOGRAPHIQUE =============== */

      /* Styles de base */
      html {
        scroll-behavior: smooth;
      }
      body {
        font-family: var(--font-andika);
        font-size: 1rem;
        line-height: 1.5;
        background-color: var(--bg-color);
        color: var(--text-color);
        transition:
          background-color 0.3s ease,
          color 0.3s ease;
      }

      /* Hiérarchie typographique principale */
      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-family: var(--font-champ);
        color: var(--color-primary);
        font-weight: 700;
        line-height: 1.2;
        transition: color 0.3s ease;
      }

      h1 {
        font-size: 2rem;
        margin-bottom: 2rem;
      }

      h2 {
        font-size: 1.5rem;
        margin-top: 2rem;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--color-border);
      }

      h3 {
        font-size: 1.25rem;
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
      }

      h4 {
        font-size: 1.125rem;
        margin-top: 1.25rem;
        margin-bottom: 0.5rem;
      }

      p {
        margin-bottom: 1rem;
      }

      /* Liens */
      a {
        color: var(--color-primary);
        text-decoration: underline;
      }

      /* Bouton standard - style global car utilisé partout */
      .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border: 1px solid var(--color-primary);
        color: var(--color-primary);
        transition: all 0.2s ease;
        text-decoration: none;
        font-size: 0.875rem;
        background-color: transparent;
        border-radius: 0.25rem;
        white-space: nowrap;
        user-select: none;
      }

      .btn:hover {
        background-color: var(--color-primary);
        color: var(--bg-color);
        text-decoration: none;
      }

      .card {
        border: 1px solid var(--color-border);
        background-color: var(--bg-color);
        border-radius: 0.375rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: background-color 0.2s ease;
      }

      .card:hover {
        background-color: rgba(var(--color-primary-rgb, 0, 0, 0), 0.05);
      }

      .email-copy {
        text-decoration: underline;
        cursor: pointer;
      }

      /* ============== STYLES POUR LE CONTENU MARKDOWN =============== */

      /* Styles pour le contenu Markdown généré (utilisé dans plusieurs composants) */
      .event-content :global(h1),
      .cantines-content :global(h1),
      .about-content :global(h1) {
        font-size: 2rem;
        margin-bottom: 1.5rem;
      }

      /* Pour cacher les H1 dans les contenus inclus dans une page */
      .event-content-in-page :global(h1) {
        display: none;
      }

      .event-content :global(h2),
      .cantines-content :global(h2),
      .about-content :global(h2) {
        font-size: 1.5rem;
        margin-top: 2rem;
        margin-bottom: 1rem;
        border-bottom: 1px solid var(--color-border);
        padding-bottom: 0.5rem;
      }

      .event-content :global(h3),
      .cantines-content :global(h3),
      .about-content :global(h3) {
        font-size: 1.25rem;
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
      }

      .event-content :global(p),
      .cantines-content :global(p),
      .about-content :global(p) {
        margin-bottom: 1rem;
      }

      .event-content :global(ul),
      .cantines-content :global(ul),
      .about-content :global(ul) {
        margin-left: 1.5rem;
        margin-bottom: 1.5rem;
        list-style-type: disc;
      }

      .event-content :global(li),
      .cantines-content :global(li),
      .about-content :global(li) {
        margin-bottom: 0.5rem;
      }

      .event-content :global(strong),
      .cantines-content :global(strong),
      .about-content :global(strong) {
        font-weight: 600;
      }

      .event-content :global(em),
      .cantines-content :global(em),
      .about-content :global(em) {
        font-style: italic;
      }

      /* Style pour le menu mobile simplifié */

      .nav-link {
        color: var(--color-primary);
        font-size: 0.95rem;
        text-decoration: none;
        padding: 0.25rem;
      }

      .nav-link:hover {
        text-decoration: none;
        opacity: 0.8;
      }

      /* Styles pour l'en-tête mobile fixed */
      .mobile-header-sticky {
        z-index: 50;
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        box-shadow: 0 1px 5px rgba(0, 0, 0, 0.1);
      }

      /* Padding pour le contenu mobile sous le header fixe */
      @media (max-width: 767px) {
        header {
          min-height: 7rem; /* Ajustez cette valeur selon la hauteur réelle de votre header */
        }
        .content-wrapper {
          padding-top: 8rem; /* Doit correspondre à la hauteur du header */
        }
      }

      /* ============== ANIMATIONS ET UTILITAIRES =============== */

      /* Adaptation responsive */
      @media (min-width: 768px) {
        /* Sur desktop, cacher le menu mobile */
        header .simple-nav {
          display: none;
        }
      }
      /* ============== STYLE POUR LES SCROLLBARS =============== */

      /* Largeur et hauteur des scrollbars */
      :root {
        --scrollbar-width: 12px;
        --scrollbar-height: 12px;
      }

      /* Styles pour les navigateurs basés sur WebKit (Chrome, Safari, Opera, Edge) */
      ::-webkit-scrollbar {
        width: var(--scrollbar-width);
        height: var(--scrollbar-height);
      }

      ::-webkit-scrollbar-track {
        background: transparent;
        border-radius: 8px;
      }

      ::-webkit-scrollbar-thumb {
        background-color: color-mix(
          in srgb,
          var(--color-primary) 40%,
          transparent
        );
        border-radius: 8px;
        border: 3px solid var(--bg-color);
        transition: background-color 0.3s ease;
      }

      ::-webkit-scrollbar-thumb:hover {
        background-color: color-mix(
          in srgb,
          var(--color-primary) 60%,
          transparent
        );
      }

      ::-webkit-scrollbar-corner {
        background: transparent;
      }

      /* Styles pour Firefox */
      * {
        scrollbar-width: thin;
        scrollbar-color: color-mix(
            in srgb,
            var(--color-primary) 40%,
            transparent
          )
          transparent;
      }

      /* Scrollbars plus petites sur les appareils mobiles */
      @media (max-width: 768px) {
        :root {
          --scrollbar-width: 8px;
          --scrollbar-height: 8px;
        }
      }

      /* Support pour le mode préférant les mouvements réduits */
      @media (prefers-reduced-motion: reduce) {
        ::-webkit-scrollbar-thumb {
          transition: none;
        }
      }

      /* Styles spécifiques pour certains conteneurs avec défilement */
      .pdf-scroller,
      .fixed-sidebar,
      .theme-overlay {
        scrollbar-width: thin;
        scrollbar-color: color-mix(
            in srgb,
            var(--color-primary) 40%,
            transparent
          )
          transparent;
      }

      /* Support des thèmes sombres */
      html[data-theme="lavande-sombre"] ::-webkit-scrollbar-thumb,
      html[data-theme="ocean-profond"] ::-webkit-scrollbar-thumb,
      html[data-theme="amethyste-or"] ::-webkit-scrollbar-thumb,
      html[data-theme="bleu-jaune"] ::-webkit-scrollbar-thumb,
      html[data-theme="gris-ambre"] ::-webkit-scrollbar-thumb,
      html[data-theme="ardoise-peche"] ::-webkit-scrollbar-thumb,
      html[data-theme="prune-menthe"] ::-webkit-scrollbar-thumb,
      html[data-theme="aubergine-citron"] ::-webkit-scrollbar-thumb,
      html[data-theme="gris-citron"] ::-webkit-scrollbar-thumb {
        border-color: var(--bg-color);
      }

      /* Styles spécifiques pour Instagram WebView */
      html.instagram-webview .content-wrapper {
        padding-top: 9rem !important;
      }

      html.instagram-webview .simple-nav {
        padding: 0.5rem 0 !important;
      }

      html.instagram-webview .nav-link {
        font-size: 0.9rem !important;
        padding: 0.25rem 0.5rem !important;
      }

      html.instagram-webview header {
        height: auto !important;
        min-height: 5rem !important;
      }
    </style>
  </head>
  <body class="min-h-screen flex flex-col">
    <!-- ThemeSwitcher en position fixe pour mobile et desktop -->
    <div class="fixed top-2 left-2 z-[100]" transition:persist>
      <ThemeSwitcher />
    </div>

    <!-- Header mobile -->
    <header
      class="border-b py-3 px-4 md:hidden fixed top-0 left-0 right-0 w-full bg-opacity-100 z-50"
      style="border-color: var(--color-border); background-color: var(--bg-color);"
      transition:persist
    >
      <div class="flex justify-between items-center">
        <div class="w-[36px]"></div>
        <!-- Espace réservé de la taille du ThemeSwitcher -->
        <span class="text-lg font-medium" style="color: var(--color-primary);"
          >Briec2000</span
        >
      </div>

      <nav class="simple-nav pt-6">
        <ul class="flex flex-wrap gap-x-4 gap-y-3 justify-center">
          <li><a href="/" class="nav-link">Accueil</a></li>
          <li><a href="/events/" class="nav-link">À venir</a></li>
          <li><a href="/cantines/" class="nav-link">Les cantines</a></li>
          <li>
            <a href="/events/2025-10-31-carnabal/" class="nav-link"
              >Le carnabal</a
            >
          </li>
          <li><a href="/about/" class="nav-link">L'association</a></li>
          <li><a href="/archives/" class="nav-link">Archives</a></li>
        </ul>
      </nav>
    </header>

    <!-- Wrapper de contenu avec transition et padding-top pour compenser le header -->
    <div class="content-wrapper flex-grow mb-6">
      <div
        class="flex-grow container mx-auto px-4 py-6 md:py-6 flex"
        transition:animate="fade"
      >
        <!-- Menu latéral pour desktop - sticky -->
        <div
          class="hidden md:block sticky top-6 self-start h-auto max-h-[calc(100vh-3rem)] pb-6"
          transition:persist
        >
          <div class="h-28">
            <!-- Espace réservé pour maintenir l'alignement vertical -->
          </div>
          <SidebarMenu transition:persist />
        </div>

        <!-- Contenu principal -->
        <main class="md:ml-12 md:mt-14 w-full mx-auto overflow-hidden">
          <slot />
        </main>
      </div>
    </div>

    <Footer transition:persist />

    <script>
      /**
       * Gestionnaire unifié des fonctionnalités de copie
       * Gère à la fois la copie d'email et la copie du menu
       */
      function initCopyFunctions() {
        // 1. Créer la notification une seule fois si elle n'existe pas déjà
        if (!document.getElementById("copy-notification")) {
          const notification = document.createElement("div");
          notification.id = "copy-notification";
          notification.style.cssText = `
        position: fixed;
        top: 10px;
        right: 8.6px;
        transform: translateX(100px);
        background-color: var(--color-secondary);
        color: white;
        padding: 10px 16px;
        border-radius: 4px;
        font-size: 0.9rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        opacity: 0;
        transition: transform 0.3s ease, opacity 0.3s ease;
        z-index: 1000;
        display: flex;
        align-items: center;
        gap: 8px;
      `;

          // Ajouter une icône de vérification
          const checkIcon = document.createElement("span");
          checkIcon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" 
             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="20 6 9 17 4 12"></polyline>
        </svg>
      `;

          // Ajouter le texte
          const text = document.createElement("span");
          text.textContent = "";

          // Assembler la notification
          notification.appendChild(checkIcon);
          notification.appendChild(text);
          document.body.appendChild(notification);
        }

        // 2. Fonction commune pour afficher la notification
        function showNotification(message: string) {
          const notification = document.getElementById("copy-notification");
          if (notification) {
            const textSpan = notification.querySelector("span:last-child");
            if (textSpan) textSpan.textContent = message;

            notification.style.transform = "translateX(0)";
            notification.style.opacity = "1";

            setTimeout(() => {
              notification.style.transform = "translateX(100px)";
              notification.style.opacity = "0";
            }, 2000);
          }
        }

        // 3. Initialiser la copie d'email
        const emailCopyLinks = document.querySelectorAll(".email-copy");
        emailCopyLinks.forEach((link) => {
          // Vérifier si le lien a déjà un écouteur attaché
          if (link.getAttribute("data-has-listener") === "true") return;

          link.addEventListener("click", (e) => {
            e.preventDefault();
            const email = "briec2000@emailasso.net";
            navigator.clipboard
              .writeText(email)
              .then(() => showNotification("Email copié !"))
              .catch((err) => {
                console.error("Erreur lors de la copie de l'email:", err);
                alert("Impossible de copier l'email: " + err);
              });
          });

          // Marquer le lien comme ayant un écouteur attaché
          link.setAttribute("data-has-listener", "true");
        });

        // 4. Initialiser la copie du menu
        const copyButtons = document.querySelectorAll(".copy-menu-btn");
        copyButtons.forEach((copyButton) => {
          // Vérifier si le bouton a déjà un écouteur attaché
          if (copyButton.getAttribute("data-has-listener") === "true") return;

          copyButton.addEventListener("click", async () => {
            try {
              // Créer un texte formaté pour la copie
              const menuText = formatMenuForCopy();

              // Copier le texte
              await navigator.clipboard.writeText(menuText);

              // Animation de succès sur le bouton
              copyButton.classList.add("copied");

              // Changer temporairement l'icône pour afficher un check
              const originalIcon = copyButton.innerHTML;
              copyButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" 
                 stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="20 6 9 17 4 12"></polyline>
            </svg>
          `;

              // Rétablir après 2 secondes
              setTimeout(() => {
                copyButton.innerHTML = originalIcon;
                copyButton.classList.remove("copied");
              }, 2000);

              // Afficher la notification
              showNotification("Menu copié !");
            } catch (err) {
              console.error("Erreur lors de la copie du menu:", err);
              alert("Impossible de copier le menu: " + err);
            }
          });

          // Marquer le bouton comme ayant un écouteur attaché
          copyButton.setAttribute("data-has-listener", "true");
        });
      }

      // Fonction pour formatter le menu pour la copie
      function formatMenuForCopy() {
        // Titre et sous-titre
        const titleElement = document.querySelector(".menu-title h3");
        const title = titleElement
          ? titleElement.textContent || "La Cantine Mensuelle"
          : "La Cantine Mensuelle";

        const subtitleElement = document.querySelector(".menu-subtitle");
        const subtitle = subtitleElement
          ? subtitleElement.textContent || ""
          : "";

        // Récupérer les sections du menu
        const courseTitle1 = document.querySelector(
          ".course-title:nth-of-type(1)"
        );
        const entreeDish = courseTitle1
          ? courseTitle1.nextElementSibling
          : null;
        const entrée =
          entreeDish && entreeDish.textContent
            ? entreeDish.textContent.trim()
            : "";

        // Plat principal et options
        const dishNameElements = document.querySelectorAll(".dish-name");
        const platPrincipal =
          dishNameElements.length > 1 && dishNameElements[1].textContent
            ? dishNameElements[1].textContent
            : "";

        const platDescriptionElement =
          document.querySelector(".dish-description");
        const platDescription = platDescriptionElement
          ? platDescriptionElement.textContent || ""
          : "";

        const optionElements = document.querySelectorAll(".option");
        const optionVeg =
          optionElements.length > 0 && optionElements[0].textContent
            ? optionElements[0].textContent.trim()
            : "";
        const optionCarne =
          optionElements.length > 1 && optionElements[1].textContent
            ? optionElements[1].textContent.trim()
            : "";

        // Dessert
        const dessert =
          dishNameElements.length > 2 && dishNameElements[2].textContent
            ? dishNameElements[2].textContent
            : "";

        const dishDescriptionElements =
          document.querySelectorAll(".dish-description");
        const dessertDesc =
          dishDescriptionElements.length > 1 &&
          dishDescriptionElements[1].textContent
            ? dishDescriptionElements[1].textContent
            : "";

        // Note de bas de page
        const noteElement = document.querySelector(".menu-note");
        const note = noteElement ? noteElement.textContent || "" : "";

        // Formater le texte
        return (
          `${title} - ${subtitle}\n\n` +
          `--- ENTRÉE ---\n${entrée}\n\n` +
          `--- PLAT PRINCIPAL ---\n${platPrincipal}\n${platDescription}\n\n` +
          `${optionVeg}\n${optionCarne}\n\n` +
          `--- DESSERT ---\n${dessert}\n${dessertDesc}\n\n` +
          `Note: ${note}\n\n` +
          `Réservation par mail à briec2000@emailasso.net`
        );
      }

      // Initialiser au chargement de la page
      document.addEventListener("DOMContentLoaded", initCopyFunctions);

      // Réinitialiser lors des changements de page d'Astro
      document.addEventListener("astro:page-load", initCopyFunctions);

      // Exécuter aussi après un court délai pour s'assurer que tout est chargé
      // en particulier dans le contexte du premier chargement de la page
      setTimeout(initCopyFunctions, 500);

      // Support pour prefers-reduced-motion
      const prefersReducedMotion = window.matchMedia(
        "(prefers-reduced-motion: reduce)"
      );
      if (prefersReducedMotion.matches) {
        const notification = document.getElementById("copy-notification");
        if (notification) {
          notification.style.transition = "opacity 0.1s ease";
        }
      }

      // Exécuter immédiatement lors du chargement du script
      initCopyFunctions();
    </script>
  </body>
</html>
